<?xml version="1.0" encoding="UTF-8"?>

<!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration>
  <!-- 定义参数 -->
  <property name="logger.lever" value="DEBUG" />
  <!-- 根路径 -->
  <property name="logger.rootPath" value="logs" />
  <!-- 文件名前缀 -->
  <property name="logger.prefix" value="unifyplatform" />
  <property name="logger.maxHistory" value="365" />
  <property name="logger.pattern" value="%-12(%d{yyyy-MM-dd HH:mm:ss.SSS}) |-%-5level [%thread] %c [%L] -| %msg%n" />

  <!-- 控制台日志配置 -->
  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <!-- 日志格式 -->
      <pattern>${logger.pattern}</pattern>
    </encoder>
  </appender>

  <!-- 每日DEBUG日志文件配置 -->
  <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 指定输出文件路径 -->
    <file>${logger.rootPath}/${logger.prefix}-debug.log</file>
    <!-- timebasedrollingpolicy：演示时间和大小为基础的日志文件归档 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 归档的日志文件的路径 -->
      <fileNamePattern>${logger.rootPath}/debug/${logger.prefix}-debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
      <!-- 控制归档文件的最大数量的保存，删除旧的文件，默认单位天数 -->
      <MaxHistory>${logger.maxHistory}</MaxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${logger.pattern}</pattern>
    </encoder>
    <!-- 级别过滤器，根据日志级别进行过滤 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>DEBUG</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 每日INFO日志文件配置 -->
  <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 指定输出文件路径 -->
    <file>${logger.rootPath}/${logger.prefix}-info.log</file>
    <!-- timebasedrollingpolicy：演示时间和大小为基础的日志文件归档 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 归档的日志文件的路径 -->
      <fileNamePattern>${logger.rootPath}/info/${logger.prefix}-info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
      <!-- 控制归档文件的最大数量的保存，删除旧的文件，默认单位天数 -->
      <MaxHistory>${logger.maxHistory}</MaxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${logger.pattern}</pattern>
    </encoder>
    <!-- 级别过滤器，根据日志级别进行过滤 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>INFO</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 每日WARN日志文件配置 -->
  <appender name="warnAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 指定输出文件路径 -->
    <file>${logger.rootPath}/${logger.prefix}-warn.log</file>
    <!-- timebasedrollingpolicy：演示时间和大小为基础的日志文件归档 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 归档的日志文件的路径 -->
      <fileNamePattern>${logger.rootPath}/warn/${logger.prefix}-warn.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
      <!-- 控制归档文件的最大数量的保存，删除旧的文件，默认单位天数 -->
      <MaxHistory>${logger.maxHistory}</MaxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${logger.pattern}</pattern>
    </encoder>
    <!-- 级别过滤器，根据日志级别进行过滤 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>WARN</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 每日ERROR日志文件配置 -->
  <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 指定输出文件路径 -->
    <file>${logger.rootPath}/${logger.prefix}-error.log</file>
    <!-- timebasedrollingpolicy：演示时间和大小为基础的日志文件归档 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 归档的日志文件的路径 -->
      <fileNamePattern>${logger.rootPath}/error/${logger.prefix}-error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
      <!-- 控制归档文件的最大数量的保存，删除旧的文件，默认单位天数 -->
      <MaxHistory>${logger.maxHistory}</MaxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${logger.pattern}</pattern>
    </encoder>
    <!-- 级别过滤器，根据日志级别进行过滤 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>ERROR</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 每日sql日志文件配置 -->
  <appender name="sqlAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 指定输出文件路径 -->
    <file>${logger.rootPath}/${logger.prefix}-sql.log</file>
    <!-- timebasedrollingpolicy：演示时间和大小为基础的日志文件归档 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 归档的日志文件的路径 -->
      <fileNamePattern>${logger.rootPath}/sql/${logger.prefix}-sql.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
      <!-- 控制归档文件的最大数量的保存，删除旧的文件，默认单位天数 -->
      <MaxHistory>${logger.maxHistory}</MaxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${logger.pattern}</pattern>
    </encoder>
    <!-- 临界值过滤器，过滤掉低于指定临界值的日志 -->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <!-- 设置过滤级别 -->
      <level>DEBUG</level>
    </filter>
  </appender>

  <!-- sql语句打印配置 -->
  <!-- name:包或类全称，或普通标识 -->
  <!-- level: 如果木有指定从最近的父类继承，顶级为root的级别 -->
  <!-- additivity: 控制是否继承父类appender，默认true -->
  <!-- <logger name="org.mybatis.spring.transaction.SpringManagedTransaction" level="DEBUG" additivity="false">
    <appender-ref ref="sqlAppender" />
  </logger> -->
  <logger name="dao" level="DEBUG" additivity="false">
    <appender-ref ref="sqlAppender" />
  </logger>

  <!-- druid数据库组件日志级别 -->
  <logger name="com.alibaba.druid" level="WARN" />

  <!-- 根路径下日志的输出级别及输出位置 -->
  <root level="${logger.lever}">
    <appender-ref ref="console" />
    <appender-ref ref="debugAppender" />
    <appender-ref ref="infoAppender" />
    <appender-ref ref="warnAppender" />
    <appender-ref ref="errorAppender" />
  </root>
</configuration>